version: '3.8'

services:
  # Redis service
  redis:
    image: redis:7-alpine
    container_name: budget-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Django web application
  web:
    build: .
    container_name: budget-web
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - redis
    environment:
      - DEBUG=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    restart: unless-stopped

  # Celery worker
  celery-worker:
    build: .
    container_name: budget-celery-worker
    command: celery -A budget_system worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
      - web
    environment:
      - DEBUG=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    restart: unless-stopped

  # Celery beat scheduler
  celery-beat:
    build: .
    container_name: budget-celery-beat
    command: celery -A budget_system beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
      - web
    environment:
      - DEBUG=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    restart: unless-stopped

  # Celery flower (optional - for monitoring)
  celery-flower:
    build: .
    container_name: budget-celery-flower
    command: celery -A budget_system flower --port=5555
    volumes:
      - .:/app
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    environment:
      - DEBUG=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    restart: unless-stopped

volumes:
  redis_data:
